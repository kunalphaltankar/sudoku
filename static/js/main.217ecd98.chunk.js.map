{"version":3,"sources":["components/Square/index.tsx","components/Grid/index.tsx","services/SudokuGrid.ts","App.js","serviceWorker.js","index.js"],"names":["Square","props","inputRef","row","col","number","onNumberChange","useEffect","value","className","style","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","type","onChange","event","parseInt","target","isNaN","lastDigit","ref","Grid","grid","map","i","key","j","num","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","SudokuGrid","console","error","registered","boxOrigin","rowOrigin","colOrigin","arr","sorted","backtrack","a","ROW_COL","y","scan","z","boxStep","boxNum","searchingNo","blindSwapIndex","q","SWAP","b","pacing","adjacentCell","adjacentNo","decrement","c","isPerfect","Grid2D","push","slice","log","solution","generateGrid","JSON","parse","stringify","this","getRandomIndex","level","App","gridData","unsolvedGrid","useState","setGrid","setSolution","display","onGridChange","onClick","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.217ecd98.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport function Square(props: any) {\r\n\tconst { row, col, number, onNumberChange } = props;\r\n\tlet inputRef: any;\r\n\r\n\tuseEffect(() => {\r\n\t\tinputRef.value = number === 0 ? \"\" : number;\r\n\t});\r\n\r\n\tconst handleNumberChange = (event: any) => {\r\n\t\tconst number = parseInt(event.target.value);\r\n\r\n\t\tif (isNaN(number)) {\r\n\t\t\tinputRef.value = \"\";\r\n\t\t} else {\r\n\t\t\tconst lastDigit = number % 10;\r\n\t\t\tonNumberChange(lastDigit);\r\n\t\t\tinputRef.value = lastDigit === 0 ? \"\" : lastDigit;\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"square\"\r\n\t\t\tstyle={{\r\n\t\t\t\tborderLeftWidth: row === 1 ? 4 : 1,\r\n\t\t\t\tborderRightWidth: row % 3 === 0 ? 4 : 1,\r\n\t\t\t\tborderTopWidth: col === 1 ? 4 : 1,\r\n\t\t\t\tborderBottomWidth: col % 3 === 0 ? 4 : 1,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"number-input\"\r\n\t\t\t\tonChange={handleNumberChange}\r\n\t\t\t\tref={(ref) => (inputRef = ref)}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { Square } from \"../Square\";\r\n\r\nexport function Grid(props: any) {\r\n\tconst { grid } = props;\r\n\r\n\treturn grid.map((row: number[], i: number) => (\r\n\t\t<div key={i}>\r\n\t\t\t{row.map((col: number, j: number) => (\r\n\t\t\t\t<Square\r\n\t\t\t\t\tnumber={grid[j][i]}\r\n\t\t\t\t\trow={i + 1}\r\n\t\t\t\t\tcol={j + 1}\r\n\t\t\t\t\tkey={j}\r\n\t\t\t\t\tonNumberChange={(num: number) => (grid[j][i] = num)}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t));\r\n}\r\n","export function shuffle(array: any[]) {\r\n\tvar currentIndex = array.length,\r\n\t\ttemporaryValue,\r\n\t\trandomIndex;\r\n\r\n\t// While there remain elements to shuffle...\r\n\twhile (0 !== currentIndex) {\r\n\t\t// Pick a remaining element...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\tcurrentIndex -= 1;\r\n\r\n\t\t// And swap it with the current element.\r\n\t\ttemporaryValue = array[currentIndex];\r\n\t\tarray[currentIndex] = array[randomIndex];\r\n\t\tarray[randomIndex] = temporaryValue;\r\n\t}\r\n\r\n\treturn array;\r\n}\r\n\r\nexport default class SudokuGrid {\r\n\tstatic isPerfect(grid: number[]) {\r\n\t\tif (grid.length !== 81)\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"The grid must be a single-dimension grid of length 81\"\r\n\t\t\t);\r\n\r\n\t\t//tests to see if the grid is perfect\r\n\r\n\t\t//for every box\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet registered = [];\r\n\t\t\tregistered[0] = true;\r\n\t\t\tlet boxOrigin = ((i * 3) % 9) + parseInt(\"\" + (i * 3) / 9) * 27;\r\n\t\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\t\tlet boxStep = boxOrigin + parseInt(\"\" + j / 3) * 9 + (j % 3);\r\n\t\t\t\tlet boxNum = grid[boxStep];\r\n\t\t\t\tregistered[boxNum] = true;\r\n\t\t\t}\r\n\t\t\tfor (let b of registered) if (!b) return false;\r\n\t\t}\r\n\r\n\t\t//for every row\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet registered = [];\r\n\t\t\tregistered[0] = true;\r\n\t\t\tlet rowOrigin = i * 9;\r\n\t\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\t\tlet rowStep = rowOrigin + j;\r\n\t\t\t\tlet rowNum = grid[rowStep];\r\n\t\t\t\tregistered[rowNum] = true;\r\n\t\t\t}\r\n\t\t\tfor (let b of registered) if (!b) return false;\r\n\t\t}\r\n\r\n\t\t//for every column\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet registered = [];\r\n\t\t\tregistered[0] = true;\r\n\t\t\tlet colOrigin = i;\r\n\t\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\t\tlet colStep = colOrigin + j * 9;\r\n\t\t\t\tlet colNum = grid[colStep];\r\n\t\t\t\tregistered[colNum] = true;\r\n\t\t\t}\r\n\t\t\tfor (let b of registered) if (!b) return false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tstatic generateGrid() {\r\n\t\tlet grid: number[] = [];\r\n\t\tlet arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\t\tfor (let i = 0; i < 81; i++) {\r\n\t\t\tif (i % 9 === 0) {\r\n\t\t\t\tarr = shuffle(arr);\r\n\t\t\t}\r\n\t\t\tlet perBox =\r\n\t\t\t\t(parseInt(\"\" + i / 3) % 3) * 9 +\r\n\t\t\t\tparseInt(\"\" + (i % 27) / 9) * 3 +\r\n\t\t\t\tparseInt(\"\" + i / 27) * 27 +\r\n\t\t\t\t(i % 3);\r\n\t\t\tgrid[perBox] = arr[i % 9];\r\n\t\t}\r\n\r\n\t\tlet sorted = [];\r\n\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet backtrack = false;\r\n\t\t\t//0 is row, 1 is column\r\n\t\t\tfor (let a = 0; a < 2; a++) {\r\n\t\t\t\tlet registered = [];\r\n\t\t\t\tlet rowOrigin = i * 9;\r\n\t\t\t\tlet colOrigin = i;\r\n\t\t\t\tROW_COL: for (let j = 0; j < 9; j++) {\r\n\t\t\t\t\t//row/column stepping - making sure numbers are only registered once and marking which cells have been sorted\r\n\t\t\t\t\tlet step = a % 2 === 0 ? rowOrigin + j : colOrigin + j * 9;\r\n\t\t\t\t\tlet num = grid[step];\r\n\r\n\t\t\t\t\tif (!registered[num]) registered[num] = true;\r\n\t\t\t\t\t//if duplicate in row/column\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//box and adjacent-cell swap (BAS method)\r\n\t\t\t\t\t\t//checks for either unregistered and unsorted candidates in same box,\r\n\t\t\t\t\t\t//or unregistered and sorted candidates in the adjacent cells\r\n\t\t\t\t\t\tfor (let y = j; y >= 0; y--) {\r\n\t\t\t\t\t\t\tlet scan = a % 2 === 0 ? i * 9 + y : i + 9 * y;\r\n\t\t\t\t\t\t\tif (grid[scan] === num) {\r\n\t\t\t\t\t\t\t\t//box stepping\r\n\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\tlet z = a % 2 === 0 ? ((i % 3) + 1) * 3 : 0;\r\n\t\t\t\t\t\t\t\t\tz < 9;\r\n\t\t\t\t\t\t\t\t\tz++\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tif (a % 2 === 1 && z % 3 <= i % 3) continue;\r\n\t\t\t\t\t\t\t\t\tlet boxOrigin =\r\n\t\t\t\t\t\t\t\t\t\tparseInt(\"\" + (scan % 9) / 3) * 3 +\r\n\t\t\t\t\t\t\t\t\t\tparseInt(\"\" + scan / 27) * 27;\r\n\t\t\t\t\t\t\t\t\tlet boxStep =\r\n\t\t\t\t\t\t\t\t\t\tboxOrigin +\r\n\t\t\t\t\t\t\t\t\t\tparseInt(\"\" + z / 3) * 9 +\r\n\t\t\t\t\t\t\t\t\t\t(z % 3);\r\n\t\t\t\t\t\t\t\t\tlet boxNum = grid[boxStep];\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t(!sorted[scan] &&\r\n\t\t\t\t\t\t\t\t\t\t\t!sorted[boxStep] &&\r\n\t\t\t\t\t\t\t\t\t\t\t!registered[boxNum]) ||\r\n\t\t\t\t\t\t\t\t\t\t(sorted[scan] &&\r\n\t\t\t\t\t\t\t\t\t\t\t!registered[boxNum] &&\r\n\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t? boxStep % 9 === scan % 9\r\n\t\t\t\t\t\t\t\t\t\t\t\t: parseInt(\"\" + boxStep / 9) ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t  parseInt(\"\" + scan / 9)))\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tgrid[scan] = boxNum;\r\n\t\t\t\t\t\t\t\t\t\tgrid[boxStep] = num;\r\n\t\t\t\t\t\t\t\t\t\tregistered[boxNum] = true;\r\n\t\t\t\t\t\t\t\t\t\tcontinue ROW_COL;\r\n\t\t\t\t\t\t\t\t\t} else if (z === 8) {\r\n\t\t\t\t\t\t\t\t\t\t//if z === 8, then break statement not reached: no candidates available\r\n\t\t\t\t\t\t\t\t\t\t//Preferred adjacent swap (PAS)\r\n\t\t\t\t\t\t\t\t\t\t//Swaps x for y (preference on unregistered numbers), finds occurence of y\r\n\t\t\t\t\t\t\t\t\t\t//and swaps with z, etc. until an unregistered number has been found\r\n\t\t\t\t\t\t\t\t\t\tlet searchingNo = num;\r\n\r\n\t\t\t\t\t\t\t\t\t\t//noting the location for the blindSwaps to prevent infinite loops.\r\n\t\t\t\t\t\t\t\t\t\tlet blindSwapIndex = [];\r\n\r\n\t\t\t\t\t\t\t\t\t\t//loop of size 18 to prevent infinite loops as well. Max of 18 swaps are possible.\r\n\t\t\t\t\t\t\t\t\t\t//at the end of this loop, if continue or break statements are not reached, then\r\n\t\t\t\t\t\t\t\t\t\t//fail-safe is executed called Advance and Backtrack Sort (ABS) which allows the\r\n\t\t\t\t\t\t\t\t\t\t//algorithm to continue sorting the next row and column before coming back.\r\n\t\t\t\t\t\t\t\t\t\t//Somehow, this fail-safe ensures success.\r\n\t\t\t\t\t\t\t\t\t\tfor (let q = 0; q < 18; q++) {\r\n\t\t\t\t\t\t\t\t\t\t\tSWAP: for (let b = 0; b <= j; b++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet pacing =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ta % 2 === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? rowOrigin + b\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: colOrigin + b * 9;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[pacing] === searchingNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet adjacentCell = -1;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet adjacentNo = -1;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet decrement =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ta % 2 === 0 ? 9 : 1;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet c = 1;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc < 3 - (i % 3);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc++\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpacing +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (c + 1) * 9\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: c + 1);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//this creates the preference for swapping with unregistered numbers\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell >=\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t81) ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 1 &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell %\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t9 ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell -= decrement;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti % 3 !== 0 ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc !== 1 ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tblindSwapIndex[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tregistered[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell -= decrement;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[adjacentCell];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//as long as it hasn't been swapped before, swap it\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!blindSwapIndex[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tblindSwapIndex[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpacing\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = adjacentNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = searchingNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsearchingNo = adjacentNo;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!registered[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tregistered[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue ROW_COL;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak SWAP;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t//begin Advance and Backtrack Sort (ABS)\r\n\t\t\t\t\t\t\t\t\t\tbacktrack = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak ROW_COL;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (a % 2 === 0)\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i * 9 + j] = true;\r\n\t\t\t\t//setting row as sorted\r\n\t\t\t\telse if (!backtrack)\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i + j * 9] = true;\r\n\t\t\t\t//setting column as sorted\r\n\t\t\t\t//reseting sorted cells through to the last iteration\r\n\t\t\t\telse {\r\n\t\t\t\t\tbacktrack = false;\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i * 9 + j] = false;\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[(i - 1) * 9 + j] = false;\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i - 1 + j * 9] = false;\r\n\t\t\t\t\ti -= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!SudokuGrid.isPerfect(grid)) {\r\n\t\t\tthrow \"ERROR: Imperfect grid generated.\";\r\n\t\t}\r\n\r\n\t\tlet Grid2D = [];\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tGrid2D.push(grid.slice(i * 9, (i + 1) * 9));\r\n\t\t}\r\n\t\tconsole.log(Grid2D);\r\n\t\treturn Grid2D;\r\n\t}\r\n\r\n\tstatic getRandomIndex = () => {\r\n\t\treturn Math.floor(Math.random() * 10) % 9;\r\n\t};\r\n\r\n\tstatic unsolvedGrid() {\r\n\t\tconst solution = SudokuGrid.generateGrid();\r\n\t\tconst grid = JSON.parse(JSON.stringify(solution));\r\n\t\tfor (let i = 0; i < 5; i++) {\r\n\t\t\tgrid[this.getRandomIndex()][this.getRandomIndex()] = 0;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tgrid,\r\n\t\t\tsolution,\r\n\t\t\tlevel: \"easy\",\r\n\t\t};\r\n\t}\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"./components/Grid\";\nimport SudokuGrid from \"./services/SudokuGrid\";\n\nfunction App() {\n\tconst gridData = SudokuGrid.unsolvedGrid();\n\tconst [grid, setGrid] = useState(gridData.grid);\n\tconst [solution, setSolution] = useState(gridData.solution);\n\n\tconst onCheck = () => {\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\tif (grid[i][j] !== solution[i][j]) {\n\t\t\t\t\talert(\"Wrong\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst gridData = SudokuGrid.unsolvedGrid();\n\t\tsetGrid(gridData.grid);\n\t\tsetSolution(gridData.solution);\n\t\talert(\"Correct\");\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div style={{ display: \"flex\" }}>\n\t\t\t\t<Grid\n\t\t\t\t\tgrid={grid}\n\t\t\t\t\tsolution={solution}\n\t\t\t\t\tonGridChange={(grid) => {\n\t\t\t\t\t\tsetGrid(grid);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<button className=\"button green\" onClick={onCheck}>\n\t\t\t\tCheck\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}