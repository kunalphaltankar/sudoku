{"version":3,"sources":["components/Square/index.tsx","components/Grid/index.tsx","services/SudokuGrid.ts","App.js","serviceWorker.js","index.js"],"names":["Square","props","inputRef","row","col","number","onNumberChange","backgroundColor","useEffect","value","className","style","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth","type","onChange","event","numberFound","target","match","lastDigit","parseInt","ref","background","onFocus","onBlur","Grid","grid","solution","doCheck","unsetDoCheck","i","j","map","key","num","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","SudokuGrid","console","error","registered","boxOrigin","rowOrigin","colOrigin","arr","sorted","backtrack","a","ROW_COL","y","scan","z","boxStep","boxNum","searchingNo","blindSwapIndex","q","SWAP","b","pacing","adjacentCell","adjacentNo","decrement","c","isPerfect","Error","Grid2D","push","slice","log","level","emptyBoxCount","generateGrid","JSON","parse","stringify","this","getRandomIndex","App","state","generateNewGrid","gridData","unsolvedGrid","setState","onCheck","alert","onSolve","display","onGridChange","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.88e6ad1f.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nexport function Square(props: any) {\r\n\tconst { row, col, number, onNumberChange, backgroundColor } = props;\r\n\tlet inputRef: any;\r\n\r\n\tuseEffect(() => {\r\n\t\tinputRef.value = number === 0 ? \"\" : number;\r\n\t});\r\n\r\n\tconst handleNumberChange = (event: any) => {\r\n\t\tconst numberFound = (event.target.value + \"\").match(/\\d+$/);\r\n\r\n\t\tif (numberFound) {\r\n\t\t\tconst number = parseInt(numberFound[0]);\r\n\t\t\tconst lastDigit = number % 10;\r\n\t\t\tonNumberChange(lastDigit);\r\n\t\t\tinputRef.value = lastDigit === 0 ? \"\" : lastDigit;\r\n\t\t} else {\r\n\t\t\tinputRef.value = \"\";\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"square\"\r\n\t\t\tstyle={{\r\n\t\t\t\tborderLeftWidth: row === 1 ? 2 : 1,\r\n\t\t\t\tborderRightWidth: row % 3 === 0 ? 2 : 1,\r\n\t\t\t\tborderTopWidth: col === 1 ? 2 : 1,\r\n\t\t\t\tborderBottomWidth: col % 3 === 0 ? 2 : 1,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tclassName=\"number-input\"\r\n\t\t\t\tonChange={handleNumberChange}\r\n\t\t\t\tref={(ref) => (inputRef = ref)}\r\n\t\t\t\tstyle={{ background: backgroundColor }}\r\n\t\t\t\tonFocus={() => {\r\n\t\t\t\t\tinputRef.style.background = \"#f0dc82\";\r\n\t\t\t\t}}\r\n\t\t\t\tonBlur={() => {\r\n\t\t\t\t\tinputRef.style.background = \"white\";\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\nimport { Square } from \"../Square\";\r\n\r\nexport function Grid(props: any) {\r\n\tconst { grid, solution, doCheck, unsetDoCheck } = props;\r\n\r\n\tconst backgroundColor = (i: number, j: number) => {\r\n\t\tif (doCheck) {\r\n\t\t\treturn grid[j][i] !== solution[j][i] ? \"red\" : \"green\";\r\n\t\t}\r\n\t\treturn \"white\";\r\n\t};\r\n\r\n\treturn grid.map((row: number[], i: number) => (\r\n\t\t<div key={i}>\r\n\t\t\t{row.map((col: number, j: number) => (\r\n\t\t\t\t<Square\r\n\t\t\t\t\tnumber={grid[j][i]}\r\n\t\t\t\t\trow={i + 1}\r\n\t\t\t\t\tcol={j + 1}\r\n\t\t\t\t\tkey={j}\r\n\t\t\t\t\tonNumberChange={(num: number) => {\r\n\t\t\t\t\t\tgrid[j][i] = num;\r\n\t\t\t\t\t\tunsetDoCheck();\r\n\t\t\t\t\t}}\r\n\t\t\t\t\tbackgroundColor={backgroundColor(i, j)}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t));\r\n}\r\n","export function shuffle(array: any[]) {\r\n\tvar currentIndex = array.length,\r\n\t\ttemporaryValue,\r\n\t\trandomIndex;\r\n\r\n\t// While there remain elements to shuffle...\r\n\twhile (0 !== currentIndex) {\r\n\t\t// Pick a remaining element...\r\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\tcurrentIndex -= 1;\r\n\r\n\t\t// And swap it with the current element.\r\n\t\ttemporaryValue = array[currentIndex];\r\n\t\tarray[currentIndex] = array[randomIndex];\r\n\t\tarray[randomIndex] = temporaryValue;\r\n\t}\r\n\r\n\treturn array;\r\n}\r\n\r\nexport default class SudokuGrid {\r\n\tstatic isPerfect(grid: number[]) {\r\n\t\tif (grid.length !== 81)\r\n\t\t\tconsole.error(\r\n\t\t\t\t\"The grid must be a single-dimension grid of length 81\"\r\n\t\t\t);\r\n\r\n\t\t//tests to see if the grid is perfect\r\n\r\n\t\t//for every box\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet registered = [];\r\n\t\t\tregistered[0] = true;\r\n\t\t\tlet boxOrigin = ((i * 3) % 9) + parseInt(\"\" + (i * 3) / 9) * 27;\r\n\t\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\t\tlet boxStep = boxOrigin + parseInt(\"\" + j / 3) * 9 + (j % 3);\r\n\t\t\t\tlet boxNum = grid[boxStep];\r\n\t\t\t\tregistered[boxNum] = true;\r\n\t\t\t}\r\n\t\t\tfor (let b of registered) if (!b) return false;\r\n\t\t}\r\n\r\n\t\t//for every row\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet registered = [];\r\n\t\t\tregistered[0] = true;\r\n\t\t\tlet rowOrigin = i * 9;\r\n\t\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\t\tlet rowStep = rowOrigin + j;\r\n\t\t\t\tlet rowNum = grid[rowStep];\r\n\t\t\t\tregistered[rowNum] = true;\r\n\t\t\t}\r\n\t\t\tfor (let b of registered) if (!b) return false;\r\n\t\t}\r\n\r\n\t\t//for every column\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet registered = [];\r\n\t\t\tregistered[0] = true;\r\n\t\t\tlet colOrigin = i;\r\n\t\t\tfor (let j = 0; j < 9; j++) {\r\n\t\t\t\tlet colStep = colOrigin + j * 9;\r\n\t\t\t\tlet colNum = grid[colStep];\r\n\t\t\t\tregistered[colNum] = true;\r\n\t\t\t}\r\n\t\t\tfor (let b of registered) if (!b) return false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tstatic generateGrid() {\r\n\t\tlet grid: number[] = [];\r\n\t\tlet arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\t\tfor (let i = 0; i < 81; i++) {\r\n\t\t\tif (i % 9 === 0) {\r\n\t\t\t\tarr = shuffle(arr);\r\n\t\t\t}\r\n\t\t\tlet perBox =\r\n\t\t\t\t(parseInt(\"\" + i / 3) % 3) * 9 +\r\n\t\t\t\tparseInt(\"\" + (i % 27) / 9) * 3 +\r\n\t\t\t\tparseInt(\"\" + i / 27) * 27 +\r\n\t\t\t\t(i % 3);\r\n\t\t\tgrid[perBox] = arr[i % 9];\r\n\t\t}\r\n\r\n\t\tlet sorted = [];\r\n\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tlet backtrack = false;\r\n\t\t\t//0 is row, 1 is column\r\n\t\t\tfor (let a = 0; a < 2; a++) {\r\n\t\t\t\tlet registered = [];\r\n\t\t\t\tlet rowOrigin = i * 9;\r\n\t\t\t\tlet colOrigin = i;\r\n\t\t\t\tROW_COL: for (let j = 0; j < 9; j++) {\r\n\t\t\t\t\t//row/column stepping - making sure numbers are only registered once and marking which cells have been sorted\r\n\t\t\t\t\tlet step = a % 2 === 0 ? rowOrigin + j : colOrigin + j * 9;\r\n\t\t\t\t\tlet num = grid[step];\r\n\r\n\t\t\t\t\tif (!registered[num]) registered[num] = true;\r\n\t\t\t\t\t//if duplicate in row/column\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//box and adjacent-cell swap (BAS method)\r\n\t\t\t\t\t\t//checks for either unregistered and unsorted candidates in same box,\r\n\t\t\t\t\t\t//or unregistered and sorted candidates in the adjacent cells\r\n\t\t\t\t\t\tfor (let y = j; y >= 0; y--) {\r\n\t\t\t\t\t\t\tlet scan = a % 2 === 0 ? i * 9 + y : i + 9 * y;\r\n\t\t\t\t\t\t\tif (grid[scan] === num) {\r\n\t\t\t\t\t\t\t\t//box stepping\r\n\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\tlet z = a % 2 === 0 ? ((i % 3) + 1) * 3 : 0;\r\n\t\t\t\t\t\t\t\t\tz < 9;\r\n\t\t\t\t\t\t\t\t\tz++\r\n\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\tif (a % 2 === 1 && z % 3 <= i % 3) continue;\r\n\t\t\t\t\t\t\t\t\tlet boxOrigin =\r\n\t\t\t\t\t\t\t\t\t\tparseInt(\"\" + (scan % 9) / 3) * 3 +\r\n\t\t\t\t\t\t\t\t\t\tparseInt(\"\" + scan / 27) * 27;\r\n\t\t\t\t\t\t\t\t\tlet boxStep =\r\n\t\t\t\t\t\t\t\t\t\tboxOrigin +\r\n\t\t\t\t\t\t\t\t\t\tparseInt(\"\" + z / 3) * 9 +\r\n\t\t\t\t\t\t\t\t\t\t(z % 3);\r\n\t\t\t\t\t\t\t\t\tlet boxNum = grid[boxStep];\r\n\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t(!sorted[scan] &&\r\n\t\t\t\t\t\t\t\t\t\t\t!sorted[boxStep] &&\r\n\t\t\t\t\t\t\t\t\t\t\t!registered[boxNum]) ||\r\n\t\t\t\t\t\t\t\t\t\t(sorted[scan] &&\r\n\t\t\t\t\t\t\t\t\t\t\t!registered[boxNum] &&\r\n\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t? boxStep % 9 === scan % 9\r\n\t\t\t\t\t\t\t\t\t\t\t\t: parseInt(\"\" + boxStep / 9) ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t  parseInt(\"\" + scan / 9)))\r\n\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\tgrid[scan] = boxNum;\r\n\t\t\t\t\t\t\t\t\t\tgrid[boxStep] = num;\r\n\t\t\t\t\t\t\t\t\t\tregistered[boxNum] = true;\r\n\t\t\t\t\t\t\t\t\t\tcontinue ROW_COL;\r\n\t\t\t\t\t\t\t\t\t} else if (z === 8) {\r\n\t\t\t\t\t\t\t\t\t\t//if z === 8, then break statement not reached: no candidates available\r\n\t\t\t\t\t\t\t\t\t\t//Preferred adjacent swap (PAS)\r\n\t\t\t\t\t\t\t\t\t\t//Swaps x for y (preference on unregistered numbers), finds occurence of y\r\n\t\t\t\t\t\t\t\t\t\t//and swaps with z, etc. until an unregistered number has been found\r\n\t\t\t\t\t\t\t\t\t\tlet searchingNo = num;\r\n\r\n\t\t\t\t\t\t\t\t\t\t//noting the location for the blindSwaps to prevent infinite loops.\r\n\t\t\t\t\t\t\t\t\t\tlet blindSwapIndex = [];\r\n\r\n\t\t\t\t\t\t\t\t\t\t//loop of size 18 to prevent infinite loops as well. Max of 18 swaps are possible.\r\n\t\t\t\t\t\t\t\t\t\t//at the end of this loop, if continue or break statements are not reached, then\r\n\t\t\t\t\t\t\t\t\t\t//fail-safe is executed called Advance and Backtrack Sort (ABS) which allows the\r\n\t\t\t\t\t\t\t\t\t\t//algorithm to continue sorting the next row and column before coming back.\r\n\t\t\t\t\t\t\t\t\t\t//Somehow, this fail-safe ensures success.\r\n\t\t\t\t\t\t\t\t\t\tfor (let q = 0; q < 18; q++) {\r\n\t\t\t\t\t\t\t\t\t\t\tSWAP: for (let b = 0; b <= j; b++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tlet pacing =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ta % 2 === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t? rowOrigin + b\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t: colOrigin + b * 9;\r\n\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[pacing] === searchingNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet adjacentCell = -1;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet adjacentNo = -1;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tlet decrement =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ta % 2 === 0 ? 9 : 1;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tfor (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlet c = 1;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc < 3 - (i % 3);\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tc++\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpacing +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 0\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? (c + 1) * 9\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: c + 1);\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//this creates the preference for swapping with unregistered numbers\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 0 &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell >=\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t81) ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(a % 2 === 1 &&\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell %\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t9 ===\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell -= decrement;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t];\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ti % 3 !== 0 ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tc !== 1 ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tblindSwapIndex[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] ||\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tregistered[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell -= decrement;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo =\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[adjacentCell];\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t//as long as it hasn't been swapped before, swap it\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!blindSwapIndex[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tblindSwapIndex[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpacing\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = adjacentNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgrid[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentCell\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = searchingNo;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsearchingNo = adjacentNo;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t!registered[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tregistered[\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tadjacentNo\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontinue ROW_COL;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tbreak SWAP;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t//begin Advance and Backtrack Sort (ABS)\r\n\t\t\t\t\t\t\t\t\t\tbacktrack = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak ROW_COL;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (a % 2 === 0)\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i * 9 + j] = true;\r\n\t\t\t\t//setting row as sorted\r\n\t\t\t\telse if (!backtrack)\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i + j * 9] = true;\r\n\t\t\t\t//setting column as sorted\r\n\t\t\t\t//reseting sorted cells through to the last iteration\r\n\t\t\t\telse {\r\n\t\t\t\t\tbacktrack = false;\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i * 9 + j] = false;\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[(i - 1) * 9 + j] = false;\r\n\t\t\t\t\tfor (let j = 0; j < 9; j++) sorted[i - 1 + j * 9] = false;\r\n\t\t\t\t\ti -= 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!SudokuGrid.isPerfect(grid)) {\r\n\t\t\tthrow new Error(\"ERROR: Imperfect grid generated.\");\r\n\t\t}\r\n\r\n\t\tlet Grid2D = [];\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tGrid2D.push(grid.slice(i * 9, (i + 1) * 9));\r\n\t\t}\r\n\t\tconsole.log(Grid2D);\r\n\t\treturn Grid2D;\r\n\t}\r\n\r\n\tstatic getRandomIndex = () => {\r\n\t\treturn Math.floor(Math.random() * 10) % 9;\r\n\t};\r\n\r\n\tstatic unsolvedGrid(level: string) {\r\n\t\tlet emptyBoxCount = 27;\r\n\t\tswitch (level) {\r\n\t\t\tcase \"medium\":\r\n\t\t\t\temptyBoxCount = 36;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"hard\":\r\n\t\t\t\temptyBoxCount = 45;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\tconst solution = SudokuGrid.generateGrid();\r\n\t\tconst grid = JSON.parse(JSON.stringify(solution));\r\n\t\tfor (let i = 0; i < emptyBoxCount; i++) {\r\n\t\t\tgrid[this.getRandomIndex()][this.getRandomIndex()] = 0;\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tgrid,\r\n\t\t\tsolution,\r\n\t\t\tlevel: \"easy\",\r\n\t\t};\r\n\t}\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"./components/Grid\";\nimport SudokuGrid from \"./services/SudokuGrid\";\n\nclass App extends React.Component {\n\tstate = {\n\t\tgrid: [],\n\t\tsolution: [],\n\t\tlevel: \"easy\",\n\t\tdoCheck: false,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst gridData = SudokuGrid.unsolvedGrid(\"easy\");\n\t\tthis.setState({\n\t\t\tgrid: gridData.grid,\n\t\t\tsolution: gridData.solution,\n\t\t\tdoCheck: false,\n\t\t});\n\t}\n\n\tgenerateNewGrid = () => {\n\t\tconst { level } = this.state;\n\t\tconsole.log(level);\n\t\tconst gridData = SudokuGrid.unsolvedGrid(level);\n\t\tthis.setState({\n\t\t\tgrid: gridData.grid,\n\t\t\tsolution: gridData.solution,\n\t\t\tdoCheck: false,\n\t\t});\n\t};\n\n\tonCheck = () => {\n\t\tconst { grid, solution } = this.state;\n\n\t\tfor (let i = 0; i < 9; i++) {\n\t\t\tfor (let j = 0; j < 9; j++) {\n\t\t\t\tif (grid[i][j] !== solution[i][j]) {\n\t\t\t\t\tthis.setState({ doCheck: true });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.generateNewGrid();\n\t\talert(\"Correct\");\n\t};\n\n\tonSolve = () => {\n\t\tthis.setState({ grid: this.state.solution });\n\t};\n\n\trender() {\n\t\tconst { grid, solution, doCheck } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"header\">\n\t\t\t\t\t<h1>Sudoku</h1>\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{ display: \"flex\" }}>\n\t\t\t\t\t<Grid\n\t\t\t\t\t\tgrid={grid}\n\t\t\t\t\t\tsolution={solution}\n\t\t\t\t\t\tonGridChange={(grid) => {\n\t\t\t\t\t\t\tthis.setState({ grid });\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdoCheck={doCheck}\n\t\t\t\t\t\tunsetDoCheck={() => {\n\t\t\t\t\t\t\tthis.setState({ doCheck: false });\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"level-button\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({ level: \"easy\" }, () => {\n\t\t\t\t\t\t\t\tthis.generateNewGrid();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tEasy\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"level-button\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({ level: \"medium\" }, () => {\n\t\t\t\t\t\t\t\tthis.generateNewGrid();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tMedium\n\t\t\t\t\t</button>\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"level-button\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.setState({ level: \"hard\" }, () => {\n\t\t\t\t\t\t\t\tthis.generateNewGrid();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tHard\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"button-container\">\n\t\t\t\t\t<button className=\"button\" onClick={this.onCheck}>\n\t\t\t\t\t\tCheck\n\t\t\t\t\t</button>\n\t\t\t\t\t<button className=\"button\" onClick={this.onSolve}>\n\t\t\t\t\t\tSolve\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}